name: Azure Pipelines

# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml
trigger:
- main

# ToDo: Replace the agent pool name, if you are using Udacity Cloud lab. 
# Otherwise, comment out the line below. 
pool: myAgentPool

variables:
  python.version: '3.7.6'
  # ToDo: Replace the service connection name as used in the DevOps project settings
  azureServiceConnectionId: 'myServiceConnection'
  # Project root folder. Point to the folder containing manage.py file.
  projectRoot: $(System.DefaultWorkingDirectory)
  # Environment name
  environmentName: 'test'

stages:
#--------------------------------------------#  
# BUILD STAGE
#--------------------------------------------#    
- stage: Build
  jobs:
  - job: BuildInfrastructure
    steps:
    #--------------------------------------------#  
    # Use Terraform to create the Infrastructure      
    # Install Terraform on the pipeline agent 
    - task: TerraformInstaller@0
      displayName: 'Terrafom installation'
      inputs:
        terraformVersion: '1.4.4'
    
    # Run Terraform Init on the pipeline agent 
    # ToDo: Replace the resource group name, storage account name, and container name below
    - task: TerraformTaskV3@3
      displayName: 'Terrafom init'
      inputs:
        provider: 'azurerm'
        command: 'init'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        backendServiceArm: '$(azureServiceConnectionId)'
        backendAzureRmResourceGroupName: 'Azuredevops'
        backendAzureRmStorageAccountName: 'tfstate2884225483'
        backendAzureRmContainerName: 'tfstate'
        backendAzureRmKey: 'test.terraform.tfstate'

    # ToDo: Run Terraform Validate    
    - task: TerraformTaskV3@3
      displayName: Terraform validate
      inputs:
        provider: 'azurerm'
        command: 'validate'

    # OPTIONAL - This step is needed only if your Terraform VM uses an SSH key pair for login and you want your pipeline agent to connect to it. 
    # Generate an SSH key pair in your local/AZ Cloud shell. Use the public key in the Terraform VM module. 
    # Install public key and private key file to the pipeline agent, using the task below. 
    # ToDo: Change the inputs value below
    # - task: InstallSSHKey@0
    #   inputs:
    #     knownHostsEntry: 'KNOWN_HOSTS_STRING' # variable value
    #     sshPublicKey: 'PUBLIC_KEY'            # variable value
    #     sshKeySecureFile: 'id_rsa' # Use secure file feature in the pipeline library UI to save the "id_rsa" file, as mentioned here: https://learn.microsoft.com/en-us/azure/devops/pipelines/library/secure-files?view=azure-devops#add-a-secure-file
    
    # - task: DownloadSecureFile@1
    #  name: udacity_public_key
    #  displayName: 
    #  inputs:
    #   secureFile: 

    
    # # Run Terraform Apply
    # # ToDo: Change the workingDirectory path, as applicable to you
    # - task: TerraformTaskV3@3
    #   displayName: Terraform apply
    #   inputs:
    #     provider: 'azurerm'
    #     command: 'apply'
    #     workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
    #     environmentServiceNameAzureRM: '$(azureServiceConnectionId)'

    # Remove symlink before destroy
    - task: CmdLine@2
      displayName: Remove symlink before destroy
      inputs:
        script: |
          echo "===== Remove Symlink ====="
          sudo rm -f /usr/bin/node
          sudo rm -f /usr/bin/npm
          sudo rm -f /usr/bin/newman
          sudo rm -f /usr/bin/jmeter
    #ToDo: Change the workingDirectory path, as applicable to you
    #Destroy the resources in Azure by running a separate pipeline. 
    - task: TerraformTaskV3@3
      displayName: Terraform destroy
      inputs:
        provider: 'azurerm'
        command: 'destroy'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        environmentServiceNameAzureRM: '$(azureServiceConnectionId)'

# #--------------------------------------------#
#     # Postman - Install Newman    
#     # ToDo: Update the command and verify the working directory
#     - task: CmdLine@2
#       displayName: Install Newman
#       inputs:
#         # ToDo: Write your commands to install newman
#         script: |
#           wget https://nodejs.org/dist/v18.16.0/node-v18.16.0-linux-x64.tar.xz
#           sudo tar -xJvf node-v18.16.0-linux-x64.tar.xz -C $(System.DefaultWorkingDirectory)
#           echo "export PATH=$(System.DefaultWorkingDirectory)/node-v18.16.0-linux-x64/bin:$PATH" >> ~/.profile
#           source ~/.profile
#           echo "===== Upgrade NPM ====="
#           npm install -g npm@latest
#           echo "===== Upgrade UUID ====="
#           npm install -g uuid@latest
#           echo "===== Install Newman  ====="
#           npm install -g newman
#           echo "===== Create symlink for node, npm and new man ====="
#           sudo ln -s $(System.DefaultWorkingDirectory)/node-v18.16.0-linux-x64/bin/node /usr/bin/node
#           sudo ln -s $(System.DefaultWorkingDirectory)/node-v18.16.0-linux-x64/bin/npm /usr/bin/npm
#           sudo ln -s $(System.DefaultWorkingDirectory)/node-v18.16.0-linux-x64/bin/newman /usr/bin/newman
#           echo "===== Verify Installation ====="
#           node -v
#           npm -v
#           newman -v
#         workingDirectory: $(System.DefaultWorkingDirectory)
        
#     # Postman Data Validation Test Suite    
#     # ToDo: Verify the working directory and the newman scripts
#     - task: CmdLine@2
#       displayName: Run Data Validation Tests
#       continueOnError: true
#       inputs:
#         # ToDo: Write your commands
#         script: |
#           newman run $(System.DefaultWorkingDirectory)/automatedtesting/postman/StarterAPIs.json          
#         workingDirectory: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'

#     # Postman Regression Test Suite    
#     # ToDo: Update the command and verify the working directory
#     - task: CmdLine@2
#       displayName: Run Regression Tests
#       continueOnError: true
#       inputs:
#         # ToDo: Write your commands
#         script: |
#           newman run $(System.DefaultWorkingDirectory)/automatedtesting/postman/RegressionTest.json -r junit,cli --reporter-junit-export TEST-Regression.xml
#         workingDirectory: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'

#     # Postman - Publish Results 
#     # ToDo: Complete the task as explained here: https://learn.microsoft.com/en-us/azure/devops/pipelines/tasks/test/publish-test-results?view=azure-devops&tabs=trx%2Cyaml#yaml-snippet
#     - task: PublishTestResults@2
#       inputs:
#         testResultsFormat: 'JUnit'
#         testResultsFiles: '**/TEST-*.xml'
#         searchFolder: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'
#         mergeTestResults: true
#         testRunTitle: 'myLab03TestResult'

#     #--------------------------------------------#
#     # Selenium (UI) Test Suite - Archive the package  
#     # "ArchiveFiles@2" picks up the web package and archives it.
#     - task: ArchiveFiles@2
#       displayName: 'Archive UI Tests'
#       inputs:
#         rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/selenium'
#         includeRootFolder: false
#         archiveType: 'zip'
#         archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-uitests.zip'
#     # Selenium Test Suite - Publish the package  
#     - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-uitests.zip   # Same as the archiveFile artifact above. 
#       displayName: 'Upload Package'
#       artifact: drop-uitests

#     #--------------------------------------------#    
#     # FakeRestAPI - Archive
#     # ToDo: Complete the ArchiveFiles@2 task and publish step 
#     - task: ArchiveFiles@2
#       displayName: 'Archive FakeRestAPI'
#       inputs:
#         rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/jmeter/fakerestapi'
#         includeRootFolder: false
#         archiveType: 'zip'
#         archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-apitests.zip'
#     # FakeRestAPI - Publish    
#     - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-apitests.zip
#       displayName: 'Upload FakeRestAPI Package'
#       artifact: fakerestapi-tests

#     #--------------------------------------------#  
#     # JMeter (Performance) Test Suite - Archive
#     # ToDo: Complete the ArchiveFiles@2 task and publish step 
#     - task: ArchiveFiles@2
#       displayName: 'Archive PerformanceTestSuite'
#       inputs:
#         rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/jmeter'
#         includeRootFolder: false
#         archiveType: 'zip'
#         archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-jmetertest.zip'
#     # JMeter Test Suite - Publish    
#     - publish: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-jmetertest.zip'
#       displayName: 'Upload PerformanceTestSuite Package'
#       artifact: performance-tests

# # --------------------------------------------#  
# # DEPLOYMENT STAGE
# # --------------------------------------------#    
# - stage: Deploy
#   jobs:
#   #--------------------------------------------#  
#   # Deploy FakeRestAPI Web App
#   # ToDo: Provide <environment name> you created in your DevOps project
#   - deployment: FakeRestAPI
#     pool:
#       vmImage: 'myLinuxVM-image-20230424092105'      
#     environment: 
#       name: test   # ToDo
#       resourceType: VirtualMachine
#     strategy:
#       runOnce:
#         deploy:
#           steps:
#           - task: AzureWebApp@1
#             displayName: 'Deploy Azure Web App'
#             inputs:
#               # ToDo
#               azureSubscription: $(azureServiceConnectionId)
#               # ToDo
#               appName: myApplication-AppService
#               appType: webApp
#               # ToDo: Use the published zip artifact.
#               package: $(Pipeline.Workspace)/fakerestapi-tests/$(Build.BuildId)-apitests.zip
#           #--------------------------------------------#    
#           # Run JMeter test suite against the App Services
#           # ToDo: Update the script below to install jmeter, unzip the jmeter test suite published zip artifact, 
#           # and run the PerformanceTestSuite.  
#           # ToDo: Generate the log file. 
#           - task: CmdLine@2
#             inputs:
#               # ToDo: Write your commands
#               script: |
#                 echo "===== Install Java ====="
#                 sudo apt install default-jre -y
#                 sudo apt install default-jdk -y
#                 echo "===== Verify Java Installation ====="
#                 java -version
#                 echo "===== Download && Setup JMeter ====="
#                 curl -O https://archive.apache.org/dist/jmeter/binaries/apache-jmeter-5.5.tgz
#                 tar -xvf apache-jmeter-5.5.tgz
#                 cd apache-jmeter-5.5/lib
#                 curl -O https://repo1.maven.org/maven2/kg/apc/cmdrunner/2.3/cmdrunner-2.3.jar
#                 cd ext/
#                 curl -O https://repo1.maven.org/maven2/kg/apc/jmeter-plugins-manager/1.9/jmeter-plugins-manager-1.9.jar
#                 cd ../
#                 java -jar cmdrunner-2.3.jar --tool org.jmeterplugins.repository.PluginManagerCMD install-all-except jpgc-hadoop,jpgc-oauth,ulp-jmeter-autocorrelator-plugin,ulp-jmeter-videostreaming-plugin,ulp-jmeter-gwt-plugin,tilln-iso8583
#                 echo "===== Verify Installation ====="
#                 sudo ln -s $(Pipeline.Workspace)/performance-tests/apache-jmeter-5.5/bin/jmeter /usr/bin/jmeter
#                 jmeter --version
#                 echo "===== List Out Folder Test Suite ====="
#                 ls -la $(Pipeline.Workspace)/performance-tests/
#                 echo "===== Unzip Folder ====="
#                 cd $(Pipeline.Workspace)/performance-tests/
#                 unzip $(Build.BuildId)-jmetertest.zip -d $(Pipeline.Workspace)/performance-tests/$(Build.BuildId)-jmetertest
#                 echo "===== Setup HEAP Size ====="
#                 echo "export HEAP=\"-Xms1G -Xmx1G -XX:MaxMetaspaceSize=192m"\" >> ~/.profile
#                 source ~/.profile
#                 echo "===== Run Performance Test Suite ====="
#                 cd $(Pipeline.Workspace)/performance-tests/$(Build.BuildId)-jmetertest
#                 jmeter -n -t Starter.jmx -l Starter-log.jtl -e -o jmeter-report
#               # ToDo: Use the artifact name from the task above
#               workingDirectory: $(Pipeline.Workspace)/performance-tests/
              
#   #--------------------------------------------#  
#   # Selenium | Functional UI Tests
#   # ToDo: 
#   - deployment: VMDeploy
#     displayName: Selenium Tests
#     dependsOn: FakeRestAPI
#     condition: succeeded()
#     pool:
#       vmImage: 'myLinuxVM-image-20230424205216'
#     environment:
#       name: test        # ToDo: Change/provide a name
#       resourceType: VirtualMachine
#       tags: selenium
#     strategy:
#       runOnce:
#         deploy:
#           steps:
#           - download: current
#             artifact: drop-uitests     # ToDo: Change/provide a name
            
#           - task: Bash@3
#             inputs:
#               targetType: 'inline'
#               script: |            
#                 # ToDo: Install Selenium, Chromium-browser & Chromedriver, if not already in the custom VM image. 
#                 #! /bin/bash
                
#                 sudo apt-get upgrade -y
#                 sudo apt-get install python3-pip -y
#                 sudo apt-get install unzip -y
#                 sudo apt-get install -y chromium-browser
#                 wget https://chromedriver.storage.googleapis.com/112.0.5615.49/chromedriver_linux64.zip
#                 unzip chromedriver_linux64.zip
#                 sudo cp chromedriver /usr/bin
#                 pip3 install selenium
                
#                 #  ToDo: Add chromedriver executable to path
#                 export PATH=$PATH:/usr/bin/chromedriver
                
#                 # ToDo: Write commands for deploying the UI Test Suite (published zip artifact) to the linux VM and execute the Test Suite
#                 cd $(System.DefaultWorkingDirectory)/drop-uitests
#                 unzip $(Build.BuildId)-uitests.zip -d $(Build.BuildId)-uitests
#                 cd $(Build.BuildId)-uitests
#                 # ToDo: Direct the output of the Selenium Test Suite to a log file
#                 python3 login.py > login_output.log
#                 # python3 ./uitests.py > uitestsoutput.log